<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/rabbit
     http://www.springframework.org/schema/rabbit/spring-rabbit-1.2.xsd">

    <!--配置connection-factory，指定连接rabbit server参数-->
    <rabbit:connection-factory id="connectionFactory"
                               virtual-host="lhr"
                               username="lhr"
                               password="111111"
                               host="192.168.1.119"
                               port="5672" />

    <!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 -->
    <rabbit:admin id="connectAdmin" connection-factory="connectionFactory" />


    <!--定义queue -->
    <rabbit:queue name="queueTest" durable="true" auto-delete="false" exclusive="false" declared-by="connectAdmin" />

    <!-- 定义direct exchange，绑定queueTest -->
    <rabbit:fanout-exchange name="exchangeTestFanout" durable="true" auto-delete="false" declared-by="connectAdmin">
        <rabbit:bindings>
            <!--<rabbit:binding queue="queueTest"  key="queueTestKey"></rabbit:binding>-->
            <rabbit:binding queue="queueTest"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:fanout-exchange>

    <!-- 数据发送者 定义rabbit template用于数据的接收和发送 -->
    <rabbit:template id="amqpTemplate" connection-factory="connectionFactory" exchange="exchangeTestFanout" />

    <!-- 消息接收者 -->
    <bean id="messageReceiver" class="com.framework.quartz.rabbitmq.MessageConsumer"></bean>

    <!-- queue litener  观察 监听模式 当有消息到达时会通知监听在对应的队列上的监听对象-->
    <rabbit:listener-container connection-factory="connectionFactory">
        <rabbit:listener queues="queueTest" ref="messageReceiver"/>
    </rabbit:listener-container>
    <!-- ########################################################################################################### -->

    <!--定义queue -->
    <rabbit:queue name="queueChris" durable="true" auto-delete="false" exclusive="false" declared-by="connectAdmin" />

    <!-- 定义direct exchange，绑定queueTest -->
    <rabbit:fanout-exchange name="exchangeTestFanout" durable="true" auto-delete="false" declared-by="connectAdmin">
        <rabbit:bindings>
            <!--<rabbit:binding queue="queueChris" key="queueTestChris"></rabbit:binding>-->
            <rabbit:binding queue="queueChris"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:fanout-exchange>

    <!-- 消息接收者 -->
    <bean id="receiverChris" class="com.framework.quartz.rabbitmq.ChrisConsumer"></bean>

    <!-- queue litener 观察 监听模式 当有消息到达时会通知监听在对应的队列(queueChris)上的监听对象 -->
    <rabbit:listener-container
            connection-factory="connectionFactory">
        <rabbit:listener queues="queueChris" ref="receiverChris" />
    </rabbit:listener-container>



    <!-- *********************配置第二个路由Exchange********************* -->
    <!--配置connection-factory，指定连接rabbit server参数 -->
    <rabbit:connection-factory id="connectionFactory2"
                               virtual-host="lhr"
                               username="lhr"
                               password="111111"
                               host="192.168.1.119"
                               port="5672" />

    <!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 -->
    <rabbit:admin id="connectAdmin2" connection-factory="connectionFactory2" />

    <!--定义queue -->
    <rabbit:queue name="queueShijj" durable="true" auto-delete="false" exclusive="false" declared-by="connectAdmin2" />

    <!-- 定义direct exchange，绑定queueTest -->
    <!-- pattern为shijj.*..          .*可以匹配一个, .#可以匹配一个或多个 -->
    <rabbit:topic-exchange name="exchangeTest2" durable="true" auto-delete="false" declared-by="connectAdmin2">
        <rabbit:bindings>
            <rabbit:binding queue="queueShijj" pattern="shijj.#"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:topic-exchange>

    <!--定义rabbit template用于数据的接收和发送 -->
    <rabbit:template id="amqpTemplate2" connection-factory="connectionFactory2" exchange="exchangeTest2" />

    <!-- 消息接收者 -->
    <bean id="recieverShijj" class="com.framework.quartz.rabbitmq.ShijjConsumer"></bean>

    <!-- queue litener 观察 监听模式 当有消息到达时会通知监听在对应的队列上的监听对象 -->
    <rabbit:listener-container
            connection-factory="connectionFactory2">
        <rabbit:listener queues="queueShijj" ref="recieverShijj" />
    </rabbit:listener-container>


    <!--<rabbit:connection-factory id="mqConnectionFactory"
                               host="192.168.1.118" username="abc" password="111111"
                               port="5672" virtual-host="host" channel-cache-size="42" />

    <rabbit:admin connection-factory="mqConnectionFactory" />

    &lt;!&ndash; queue 队列声明 &ndash;&gt;
    <rabbit:queue id="queue_osm" durable="true" auto-delete="false"
                  exclusive="false" name="queue_osm" />

    &lt;!&ndash; exchange queue binging key 绑定 &ndash;&gt;
    <rabbit:direct-exchange name="exchangeTest1"
                            durable="true" auto-delete="false" id="exchangeTest1">
        <rabbit:bindings>
            <rabbit:binding queue="queue_osm" key="queue_osm" />
        </rabbit:bindings>
    </rabbit:direct-exchange>

    &lt;!&ndash; 消息处理者 start &ndash;&gt;
    <bean id="receiver" class="com.framework.quartz.rabbitmq.MessageConsumer" />
    &lt;!&ndash; 消息处理者 end &ndash;&gt;

    <rabbit:listener-container
                               connection-factory="mqConnectionFactory" acknowledge="manual"
                               auto-startup="true" prefetch="1000" concurrency="42">
        <rabbit:listener queues="queue_osm" ref="receiver" />
    </rabbit:listener-container>

    <rabbit:template id="template" connection-factory="mqConnectionFactory" exchange="exchangeTest1"/>-->

</beans>